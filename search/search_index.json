{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This guide provides a step-by-step walkthrough for developing a simple \"Hello World\" smart contract. The smart contract will be developed using the Remix Online IDE and programmed in Solidity. It will then be deployed onto the Flare Network with the assistance of a common Web3 wallet, MetaMask.</p> <p>While the \"Hello World\" smart contract is a fairly common beginner's example, the version presented in this guide adds a few extra features to explore some additional smart contract capabilities.</p>"},{"location":"acquiring_testnet_tokens/","title":"Acquiring Testnet Tokens","text":"<p>As noted previously, testnet tokens are distinct from their mainnet counterparts and hold no real-world value. These testnet tokens can be acquired for free from distribution services called faucets.  You may have noticed the URL for the Coston2 faucet when viewing the Flare Network settings here.</p> <p></p>"},{"location":"acquiring_testnet_tokens/#visit-the-coston2-faucet","title":"Visit the Coston2 Faucet","text":"<ol> <li>You'll need to provide the address of your Flare Network account to the faucet so the faucet knows where to send the testnet tokens. You can easily copy your address into your clipboard by clicking on the address in MetaMask as shown in the image below.      </li> <li>Access the Coston2 faucet here and paste your address into the provided Flare address field as shown below. Click Requset C2FLR to request your testnet tokens. After making the request you can close the website for the faucet.      </li> <li>Return to your MetaMask browser extension and refresh your browser. Within a few seconds you should see that you have received 100 worthless C2FLR testnet tokens.      </li> </ol>"},{"location":"blockchain_explorers/","title":"Blockchain Explorers","text":"<p>Most blockchains provide full transparency which means you can view all the transactions that occur on the blockchain. Typically, this information is available via a Blockchain Explorer. A Blockchain Explorer is simply a website that presents blockchain activity in a user-friendly and easy-to-read format. MetaMask provides a convenient shortcut for visiting Blockchain Explorers as described below.</p> <p></p>"},{"location":"blockchain_explorers/#visit-the-flare-network-blockchain-explorer","title":"Visit the Flare Network Blockchain Explorer","text":"<ol> <li>The Coston2 Blockchain Explorer is available here.  You can also access the Blockchain Explorer through MetaMask and jump directly to your account's transaction history. Click on the triple-dot menu () in MetaMask as shown in the  image below.      </li> <li>Click View on explorer as shown below. This should open a new browser window with details for your blockchain address.      </li> <li>If this is a new account, you should see a single successful transaction in your transaction history window. This is the transaction performed by the Coston2 faucet when it sent 100 C2FLR to your account.      </li> <li>Clicking the transaction ID (the long hexadecimal string at the top of the transaction box) provides additional detail about the transaction as shown below.      </li> </ol>"},{"location":"building_smart_contract/","title":"Building a Smart Contract","text":"<p>There are many blockchains and many smart contract platforms in existence. Additionally, there are a wide variety of programming languages available in which one could develop smart contracts. This guide targets the Ethereum Virtual Machine (EVM) runtime environment. The EVM was originally written for and deployed on the Ethereum blockchain. Since then, the EVM has been ported to run as the default smart contract execution environment on numerous blockchains, including the Flare Network.</p> <p>Currently, the most common programming language used by smart contract developers is Solidity. It's a fairly straightforward language if you have experience with languages like C or JavaScript. Solidity code is compiled to EVM bytecode which is then deployed onto the blockchain and executed by the EVM as part of a blockchain transaction.  While it's fairly quick to set up a local environment to compile and deploy Solidity programs, it's even quicker to utilize an online IDE. For this guide, we'll use the Remix Project which hosts an online IDE capable of compiling and deploying Solidity.</p> <p>For this guide, we'll write a simple Hello World smart contract.</p> <p></p>"},{"location":"building_smart_contract/#lets-get-coding","title":"Let's Get Coding","text":"<ol> <li>Start by launching the Remix Online IDE. If this is your first time launching the IDE, you'll likely see a welcome message and a very brief tour of the user interface. After the tour, you should have a basic environment that looks like the following.      </li> <li>To create a new smart contract file, first click the contracts folder in the FILE EXPLORER column, then click the Create new file icon (  ) just above the contracts folder. Name your new smart contract file HelloWorld.sol as shown below.       If your HelloWorld.sol file was created outside of the contracts folder, simply drag the file into folder.     </li> <li>In the left sidebar, open the Solidity compiler settings and the click the compiler version drop down box.       Select compiler version 0.8.17.      </li> <li>Return to your HelloWorld.sol file and enter the following as the first couple lines of your smart contract. HelloWorld.sol<pre><code>// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n</code></pre> Line 1 specifies the license for this smart contract. While this isn't strictly required, the Remix Online IDE complains too much if it's not included. Line 2 specifies the version of the compiler that should be used to compile this smart contract.     </li> <li>Next, define the contract body using the contract keyword followed by the name of the contract, HelloWorld. Add in some curly-braces to enclose the body. HelloWorld.sol<pre><code>// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ncontract HelloWorld {\n\n}\n</code></pre> The contract body is where we'll put state variables as well as the functions necessary to modify those variables.     </li> <li>Define your first smart contract variable, a string called message as shown below. HelloWorld.sol<pre><code>// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ncontract HelloWorld {\n    string public message;\n}\n</code></pre> Since this variable is public, it will exist on the blockchain and be visible to everyone.     </li> <li>Time to create a constructor for your smart contract. The constructor runs only once, when the smart contract is deployed. Because of this, the constructor is often used to provide special permission to the account that deployed the smart contract. For now, just create a basic constructor that accepts an initial value for the message value as shown below. HelloWorld.sol<pre><code>// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ncontract HelloWorld {\n    string public message;\n\n    constructor(string memory initialMessage) {\n        message = initialMessage;\n    }\n}\n</code></pre> The constructor accepts an argument named initialMessage and assigns the value of that argument to the contract's state variable message.  The memory keyword is one of several keywords that Solidity uses to define where a piece of data should be stored. Specifically, the memory keyword indicates that the value of initialMessage only exists during the lifetime of the constructor.      </li> <li>Next, create a function that updates the value of the state variable message. HelloWorld.sol<pre><code>// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ncontract HelloWorld {\n    string public message;\n\n    constructor(string memory initialMessage) {\n        message = initialMessage;\n    }\n\n    function updateMessage(string memory newMessage) public {\n        message = newMessage;\n    }\n}\n</code></pre> The public modifier indicates that this function can be called from outside of this smart contract (i.e., as part of a blockchain transaction). To create functions that can only be called from within the smart contract, set the access modifier to private.  This is now a complete smart contract and can be deployed as-is.  However, we can add some more functionality to make it a bit more interesting.     </li> <li>Solidity provides the ability to log additional information to the blockchain and to notify external entities of events that occur. To add this to the smart contract, let's define an event that can log some information when the updateMessage function is called. HelloWorld.sol<pre><code>// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ncontract HelloWorld {\n    string public message;\n    event updatedMessage(string oldMessage, string newMessage);\n\n    constructor(string memory initialMessage) {\n        message = initialMessage;\n    }\n\n    function updateMessage(string memory newMessage) public {\n        message = newMessage;\n    }\n}\n</code></pre> </li> <li>Next, emit the event when the updateMessage function is called by adding the following code on lines 13 and 15. HelloWorld.sol<pre><code>// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ncontract HelloWorld {\n    string public message;\n    event updatedMessage(string oldMessage, string newMessage);\n\n    constructor(string memory initialMessage) {\n        message = initialMessage;\n    }\n\n    function updateMessage(string memory newMessage) public {\n        string memory oldMessage = message;\n        message = newMessage;\n        emit updatedMessage(oldMessage, newMessage);\n    }\n}\n</code></pre> </li> <li>Finally, let's ensure that only the owner of this smart contract can update the message value. To do this, the contract needs to store the address that deployed the contract. This can be done with a new state variable, a quick modification to the constructor, and another quick modification to the updateMessage function as shown below. HelloWorld.sol<pre><code>// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ncontract HelloWorld {\n    address public owner;\n    string public message;\n    event updatedMessage(string oldMessage, string newMessage);\n\n    constructor(string memory initialMessage) {\n        owner = msg.sender;\n        message = initialMessage;\n    }\n\n    function updateMessage(string memory newMessage) public {\n        require(msg.sender == owner);\n        string memory oldMessage = message;\n        message = newMessage;\n        emit updatedMessage(oldMessage, newMessage);\n    }\n}\n</code></pre> Line 5 creates the state variable that will store the address of whomever deploys the contract (i.e., the owner).   Line 10 assigns the owner of the contract using the built-in value msg.sender. The msg is the blockchain transaction. It has many properties, including sender and receiver. For this smart contract we want the message sender (msg.sender) to be the owner.  Line 15 checks the address of the sender that called updateMessage. If the sender address matches that of the owner the updateMessage function will run and modify the message state variable. If the address of the sender is NOT the owner's, the updateMessage function will fail. </li> </ol>"},{"location":"deploying_smart_contract/","title":"Deploying a Smart Contract","text":"<p>The Remix Online IDE provides all the facilities to deploy your new smart contract directly to the blockchain. This portion of the guide walks through deploying your smart contract on the Flare Network.</p> <p></p> <ol> <li>Select the Solidity compiler tab from the sidebar of Remix.      </li> <li>Click the Compile HelloWorld.sol button.           If you have any errors or typos, be sure to fix them.    </li> <li>Select the Deploy &amp; run transactions tab from the sidebar of Remix.      </li> <li>In the ENVIRONMENT drop down box, select Injected Provider - MetaMask.            This should spring MetaMask into action. Ensure that the account with your 100 C2FLR is selected and click Next.           Allow Remix to connect to MetaMask by clicking Connect.           Remix should now be able to connect with and communicate with MetaMask. Remix will utilize MetaMask to sign transactions with your address. You should see your address in the Remix sidebar under ACCOUNT.      </li> <li>Type an initialMessage into the text field prior to deployment. Click the Deploy button and confirm the CONTRACT DEPLOYMENT transaction in MetaMask.           If all goes well, you should see several indications that your smart contract was successfully deployed.           Click on the down arrow next to the DEBUG button to see some information about your smart contract, including the smart contract address.          You can also see the contract name in the left sidebar.  Copy the smart contract address and paste it into the Search field on the Coston2 Blockchain Explorer to find your smart contract on the blockchain.      </li> </ol>"},{"location":"interacting_with_smart_contract/","title":"Interacting with your Smart Contract","text":"<p>The Remix Online IDE provides a convenient interface to interact with and test your new smart contract. This portion of the guide walks through interacting with your smart contract on the Flare Network.</p> <p>For a real-world deployment, you can utilize JavaScript and/or other web technologies to interact with your smart contract.</p> <p></p> <ol> <li>In the left sidebar of the Remix interface, find the Deployed Contracts area and expand the information about your Hello World smart contract. Remix understands the interface for your smart contract and generates a simple user interface. The blue buttons simply query the smart contract for information but don't modify the state of the contract. The orange button modifies the state of the smart contract and thus will require that you sign the transaction.           Click on the blue message button to see the message value currently stored by the smart contract.      </li> <li>Click on the blue owner button to see the owner value stored by the smart contract. Note that, by design, the owner value cannot be changed. It was set in the constructor when the contract was deployed and will always have the same value.           You should see your Flare Network address.      </li> <li>To write a new message value to the contract, enter the text of your new message into the updateMessage box and click the updateMessage button.           Since you're writing to the smart contract, you'll need to sign this transaction.  MetaMask should pop up automatically. Review the transaction details and click Confirm.      </li> <li>If the transaction is successful, you'll see a message in the console window indicating the transaction is complete. Expanding the message will reveal additional information, including the text that is emitted by the updatedMessage event.      </li> <li>Return to the Coston2 Blockchain Explorer and find your smart contract by searching its address. You'll see a transaction labeled Contract Call Success.  This is the transaction that you issued to update the message state of the smart contract.      </li> <li>Back in the Remix window, click on the blue message button once again. You should now see the new message.      </li> </ol>"},{"location":"metamask_configuration/","title":"MetaMask Configuration","text":"<p>By default, MetaMask connects to the Ethereum Mainnet blockchain.  The Ethereum Mainnet is home to the Ether (ETH) cryptocurrency.  Since transaction times on Ethereum can be a bit unpredictable (and occasionally sluggish), it's not well-suited for a time-limited workshop. Instead, of Ethereum, this guide utilizes the Flare Network project. </p> <p>During development, and for the purposes of this guide, it wouldn't be wise to interact with a network that holds real-world value.  There are many test networks associated with various crypto projects (including both Ethereum and the Flare Network). A test network (a.k.a. a testnet) is an instance of a blockchain network used for testing and development. Testnet tokens are distinct from their mainnet counterparts and hold no real-world value. These testnet tokens can be acquired for free from distribution services called faucets.</p> <p>This portion of the guide walks through the process of configuring MetaMask to connect to Flare Network's testnet called Coston2.  The settings for the Flare Network Coston2 testnet are located here. The steps below describe how to set up access to this blockchain in MetaMask.</p> <p></p>"},{"location":"metamask_configuration/#selecting-a-network","title":"Selecting a Network","text":"<ol> <li>To get started, open the MetaMask browser extension and click on the network selection button as shown in the image below.      </li> <li>In the small pop-up window, click Add network.      </li> <li>Next, click Add a network manually.      </li> <li>Populate the Network Name, New RPC URL, Chain ID, Currency symbol, and Blockchain explorer URL with the following values.  Network Name<pre><code>Coston2\n</code></pre> New RPC URL<pre><code>https://coston2-api.flare.network/ext/C/rpc\n</code></pre> Chain ID<pre><code>114\n</code></pre> Currency symbol<pre><code>C2FLR\n</code></pre> Blockchain explorer URL<pre><code>https://coston2-explorer.flare.network\n</code></pre> When complete, your settings should match those in the image below. Click Save to add the network.     </li> <li>You should see a message indicating that the network was successfully added.  Click Switch to Coston2 to use the Coston2 testnet.      </li> <li>MetaMask should now show that you're connected to Coston2 and that you have zero C2FLR tokens.      </li> </ol>"},{"location":"metamask_installation/","title":"MetaMask Installation","text":"<p>MetaMask is a software crypto wallet that can be used to interact with a wide variety of crypto blockchains. MetaMask is distributed as a standalone app for both iOS and Android. Additionally, it can be installed as a browser extension in most commonly used web browsers, including Chrome, Firefox, Brave, Edge, and Opera. Continue below to install and configure MetaMask for this guide.  </p> <p>Info</p> <p>The term wallet is an unfortunate bit of nomenclature in the crypto space and often misleads newcomers. Unlike a physical wallet that may hold cash and credit cards, a crypto wallet doesn't actually store any digital assets. Instead, a crypto wallet stores the public and private cryptographic keys required to digitally sign crypto transactions. All digital assets exist on the blockchain. When interacting with a blockchain, transactions can be signed using the crypto wallet containing your private key.</p> <p>Warning</p> <p>Keep your private keys PRIVATE and SAFE. As long as you have your private keys, you can always access your assets on the blockchain. Of course, if someone else has your private keys, they can also access your assets.</p> <p>Warning</p> <p>MetaMask is a convenient crypto wallet for testing and debugging smart contracts and even for storing small amounts of digital assets. However, it's a software program running on an online device. That makes it potentially vulnerable to a wide variety of attacks. When deploying production smart contracts or interacting with crypto accounts that have real value, it is HIGHLY recommended that you utilize an offline hardware wallet.</p> <p></p>"},{"location":"metamask_installation/#install-browser-extension","title":"Install Browser Extension","text":"<ol> <li>Select your web browser below and install the MetaMask extension.      Chrome Firefox Brave Edge Opera      For example, in Chrome click Add to Chrome as shown in the image below.     </li> <li>When the installation starts, you'll need to agree to the Terms of Use and then click Create a new wallet.      </li> <li>Since the MetaMask software wallet is used to sign crypto transactions it's very important to secure the account with a strong password.      </li> <li>Typically, this would be a great time to save the Secret Recovery Phrase somewhere secret, somewhere safe. Your Secret Recovery Phrase is used to generate your private key and can be used to recover an account if you computer explodes or sinks to the bottom of a lake. However, since the account you just created is merely for this guide and won't ever store any real assets you can skip this step.      </li> <li>At this point your wallet should be successfully created.      </li> <li>In the future, you can access the MetaMask wallet from the extensions menu of your web browser as shown in the image below.      </li> <li>Some web browsers, like Chrome, will allow you to pin the extension to the toolbar making it easier to find in the future.      </li> </ol>"}]}